+1UP CI/CD

Josh Harshman
20 Oct 2020
josh.harshman@bit.ly

* About Me
- Senior Software Engineer @ Bitly
- Been using Go for a while - big fan
- Maintainer of Cobra and Pflag

* What is Skaffold?
Skaffold is a command line tool that facilitates continuous development for Kubernetes native applications.

It provides helpful building blocks for creating CI/CD pipelines which will
- build
- publish
- deploy

https://skaffold.dev

: So what is Skaffold? It's a command line tool that facilitates continuous development for kubernetes native applications.
: As such it provides helpful building blocks for creating CI/CD pipelines which build, publish, and deploy your application.
: More information and documentation is available on their website skaffold.dev. I encourage everyone to read the docs
: as they are short and easily digestible.

* Pluggable
Skaffold is built to be extensible.

Build:
- Docker 
- Jib
- Bazel
- BuildPacks
- Custom

Deploy:
- Kubectl 
- Kustomize
- Helm

: Skaffold is built to be pluggable. By this I mean that it supports various methods of building and deploying.
: It supports technologies like Docker and KubeCTL, but also others like CNF BuildPacks and Helm or Kustomize.
: It also allows you to build remotely with Google Cloud Build which is wonderful if your machine is hard up for RAM like mine is.

* Our current setup (build)
cloudbuild-release.yaml:

.code snippet1.sh

- Not bad
- Easy to understand
- A bit verbose

: Here is a snippet of what powers our build and publish step.
: It's pretty straightforward and uses two commands `docker pull` and `docker build`.
: If the image tag already exists, the build isn't executed again.
: One issue here is that tags are mutable.

* Skaffold Build
Build & Push is reduced to the following line

.code snippet2.sh

: To both build and publish a container image, all you need is this one-liner.
: Skaffold will leverage your Dockerfile to execute the build, and will then tag
: and push the built container image to the registry configured in skaffold.yaml.
: In the above command, Skaffold saves the built image tag and digest to a file
: to be used later in the pipeline. An alternative to these two steps would be to run 
: `skaffold run` which will perform the entire pipeline (build, publish, deploy). But
: I find it nice to have explicit steps.

* Our current setup (deploy)
cloudbuild-release.yaml:

.code snippet3.sh

- Not fun to read
- Looping and Sed
- Extra scripting to track deploy result

: Our current deploy relies on some looping and sed magic that really takes away from readability.
: We have numerous kubectl commands and extra logic in order to track the result of a deploy.
: While it might be easy for some of us to understand this logic and what it does, it could
: be pretty intimidating to our individuals on other teams who want to get started with GKE.
: And again here it uses a mutable tag.

* Skaffold Deploy
deploy replaced with skaffold:

.code snippet4.sh

- less complex
- does the job
- simple configuration


: With Skaffold, we are able to remove much of this complication.
: Skaffold will take care of injecting the image tag and digest (immutable) (more on why it does this later).
: It will also track the result of the deploy and wait for the deployment to stabalize. Skaffold will
: wait for the time specified by `progressDeadlineSeconds` in the deployment specification or `statusCheckDeadlineSeconds`
: which is defined in the skaffold.yaml deploy stanza.
: This is in contrast to having the timeout specified in the kubectl command in cloudbuild.yaml

* Simple Configuration

.code snippet5.sh

: Here is a sample configuration for Skaffold.
: There are two core stanzas here `build` and `deploy`.
: Within the `build` stanza, you can see options for the image, tag style, and where the Dockerfile is located.
: Within the `deploy` stanza, it is selecting kubectl as the deployer and pointing at a manifest in the conf/ dir.
: Below that, the `profiles` stanza allows the user to override options defined previously. For Example,
: the profile defined (prod) overrides the deploy to select `conf/production.yaml` instead of `conf/staging.yaml`.

